%token NUMBER STRING JOSI WORD COMMENT DEF_FUNC DEF_CLASS
%token IF THEN ELSE LOOP
%left '+' '-'
%left '*' '/' '%'
%left '&' '|'
%nonassoc UMINUS

%%
program : stmt_list { return lib_dic.commands['test'] + '\n' + $1; }
        ;

stmt_list : { $$ = '';}
		| stmt_list stmt { $$ = $1 + $2+ '\n';}
		;

stmt : assign { $$ = $1 + ';' }
		| funcall { $$ = $1 + ';' }
		| def_function
		| def_class
		| if_stmt
		| loop_stmt
		| COMMENT
		;

assign : variable '=' expr { $$ = $1 + '=' + $3;}
		| variable '+' '=' expr { $$ = $1  + '+=' + $4;}
		| variable '-' '=' expr { $$ = $1  + '-=' + $4;}
		| variable '*' '=' expr { $$ = $1  + '*=' + $4;}
		| variable '/' '=' expr { $$ = $1  + '/=' + $4;}
		;

funcall : args WORD { $$ = lib_dic.get_comm($2, $1);}
		| WORD { $$ = lib_dic.get_comm($1,'');}
		;

def_function : DEF_FUNC WORD '{' stmt_list '}'
			{$$ = 'void ' + lib_dic.get_comm($2,'') + '{\n' + $4 + '}';}
		|DEF_FUNC WORD JOSI WORD '{' stmt_list '}'
			{$$ = lib_dic.get_types($4,'') + ' ' + lib_dic.get_comm($2,'') + '{\n' + $6 + '}';}
		;

def_class : DEF_CLASS WORD '{' stmt_list '}'
			{$$ = 'class ' + lib_dic.get_types($2,'') + '{\n' + $4 + '}';}
		;

if_stmt : IF '{' phrase_part '}' THEN '{' stmt_list '}'
			{$$ = 'if (' + $3 + ') {\n' + $7 + '}' }
		| IF '{' phrase_part '}' THEN '{' stmt_list '}' ELSE '{' stmt_list '}'
			{$$ = 'if (' + $3 + ') {\n' + $7 + '} else {\n' + $11 +'}' }
		;

loop_stmt : '{' phrase_part '}' JOSI LOOP '{' stmt_list '}'
			{ $$ = lib_dic.get_comm($5,$2) + ' {\n' + $7 + '}' }
		| '{' WORD ':' assign ',' WORD ':' expr ',' WORD ':' assign '}' JOSI LOOP '{' stmt_list '}'
			{ $$ = lib_dic.get_comm($15,$4 + ';' + $8 + ';' + $12) + ' {\n' + $17 + '}' }
		;

args : phrase
		| args phrase { $$ = $1 + ',' + $2;}
		;

phrase : '{' phrase_part '}' JOSI { $$ = $2 }
		;

phrase_part : WORD ':' expr { $$ = $3 }
		| phrase_part ',' WORD ':' expr { $$ = $1 + ',' + $5 }
		;

expr : expr '+' expr { $$ = $1 + '+' + $3; }
		| expr '-' expr { $$ = $1 + '-' + $3; }
		| expr '*' expr { $$ = $1 + '*' + $3; }
		| expr '/' expr { $$ = $1 + '/' + $3; }
		| expr '%' expr { $$ = $1 + '%' + $3; }
		| expr '&' '&' expr { $$ = $1 + '&&' + $4; }
		| expr '|' '|' expr { $$ = $1 + '||' + $4; }
		| expr '<' expr { $$ = $1 + '<' + $3; }
		| expr '>' expr { $$ = $1 + '>' + $3; }
		| expr '<' '=' expr { $$ = $1 + '<=' + $4; }
		| expr '>' '=' expr { $$ = $1 + '>=' + $4; }
		| expr '!' '=' expr { $$ = $1 + '!=' + $4; }
		| expr '=' '=' expr { $$ = $1 + '==' + $4; }
		| '(' expr ')' { $$ = '(' + $2 + ')'; }
		| '-' expr %prec UMINUS {$$ = '-' + $2} 
		| '!' expr {$$ = '!' + $2} 
		| funcall
		| variable
		| primary
		;

variable : '@' WORD {$$ = lib_dic.get_vars($2, '')}
		| '@' WORD JOSI WORD 
			{$$ = lib_dic.get_types($4, '') + " " + lib_dic.get_vars($2, '')}
		;

primary : NUMBER
		| STRING
		;

%%
